#!/bin/bash
# netctl managing script for easier workday mornings and afternoons

# debug-flag, '-' signifying debug-mode
set +x

# source helper-script for calling getcurrentpassword-function
source getpasswords.sh

wireless_adapter="wlp3s0"
netctl_location="/etc/netctl/"
netctl_home_profile="home"
netctl_work_profile="aau"
network_up_host="aau.dk"

# quick functions for home/work actions on network manager
disconnect_home() {
  printf '%s\n' "Disconnecting from home (profile: $netctl_home_profile)"
  netctl stop $netctl_home_profile
}

connect_home() {
  printf '%s\n' "Connecting to home (profile: $netctl_home_profile)"
  netctl start $netctl_home_profile
}

disconnect_work() {
  printf '%s\n' "Disconnecting from work (profile: $netctl_work_profile)"
  netctl stop $netctl_work_profile
}

connect_work() {
  printf '%s\n' "Connecting to work (profile: $netctl_work_profile)"
  netctl start $netctl_work_profile
}

connect() {
  printf '%s\n' "Connecting to $1"
  netctl start $1
}

# safely kill adapter between profiles to ensure smooth dis- and connection, also print ip link status
set_adapter_down() {
  ip link set $wireless_adapter down
}

print_adapter_status() {
  ip link | grep $wireless_adapter
}

# perl regex; find "Key=" and replace all chars after, on given line, with
# parameter $2, do this on file at $1
replace_password() {
  perl -pi -e "s/(?<=Key=).*$/$2/" $1
}

# call function with two args; concatenation of $netctl_loc and $1, and $2
change_profile_password() {
  replace_password $netctl_location$1 $2
}

# prompt if user wants to change password
change_password_prompt() {
  read -p "Do you want to change the given password? (y/n) " yn
  if [ "$yn" != "${yn#[Yy]}" ]; then
    # read profile and password in
    read -p "What password do you want to substitute with? " password
    change_profile_password $1 $password
  else
    # connect with first argument, which must be profile
    # TODO; test this
    connect $1
  fi
}

change_password_aau() {
  # quick and dirty 1DAY-profile
  change_profile_password "aau" $1
}

wait_for_network() {
    until $(curl --output /dev/null --silent --head --fail --connect-timeout 1 $network_up_host); do
        printf '%s\n' "Waiting for connection..."
    done
}

# set verbosity and shift params down 
#if [[ "-v" == "$1" ]]; then
#  VERBOSE=1
#  shift
#fi

# overload echo-function to use builtin echo if verbosity is set high
#echo () {
#  [[ "$VERBOSE" ]] && builtin echo $@
#}

if [[ $# -eq 0 ]] ; then
  printf '%s\n' "No arguments, connecting to home"
  disconnect_work
  set_adapter_down
  connect_home
  print_adapter_status
elif [[ $# -eq 1 ]]; then

  # if aau, then find password, connect and update cached passwords when connection is given
  if [[ "$1" =~ aau ]]; then
    printf '%s\n' "AAU-keyword found, checking for cached password"
    # grab current password from helper
    current_password=$(getcurrentpassword)

    # if no cached password, prompt for password
    #if [[ -z "$current_password" ]]; then
    if [[ $? -eq 1 ]]; then
        printf '%s' "No cached password found, input password manually: "
        read current_password
    else
        # print daily password, if found
        printf '%s\n' "Daily AAU-1-DAY password is: $current_password"
    fi
    disconnect_home
    set_adapter_down
    change_password_aau $current_password
    connect_work
    # call function to update passwords once connection is established
    printf '%s\n' "Waiting for network connection..."
    wait_for_network
    printf '%s\n' "Network connection established, updating cached passwords"
    updatepasswords
  # if alpha, num, alpha regex, then 1day password
  elif [[ "$1" =~ ^[a-z]+[0-9]+[a-z]+$ ]]; then
    printf '%s\n' "Connecting to AAU-1-DAY with password: $1"
    disconnect_home
    set_adapter_down
    change_password_aau $1
    connect_work
    print_adapter_status
    # TODO: when at work, update passwdlist
    update
  else
    printf '%s\n' "This doesn't seem to be an AAU-1-DAY password, please check"
  fi
elif [[ $# -eq 2 ]]; then
  # TODO; check if profile exists, if not, create profile and start
  printf '%s\n' "Received SSID: $1 and password: $2"
fi

exit 0
