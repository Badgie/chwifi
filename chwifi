#!/bin/bash
# netctl managing script for easier workday mornings and afternoons

# debug-flag, '-' signifying debug-mode
set +x

# source helper-script for calling getcurrentpassword and updatepasswords-function
source passwordhandler.sh

# source config for user-specific variables
source config

# quick functions for home/work actions on network manager
disconnect_home() {
  printf '%s\n' "Disconnecting from home (profile: $network_manager_home_profile)"
  $network_manager $network_manager_disconnect $network_manager_home_profile
}

connect_home() {
  printf '%s\n' "Connecting to home (profile: $network_manager_home_profile)"
  $network_manager $network_manager_connect $network_manager_home_profile
}

disconnect_work() {
  printf '%s\n' "Disconnecting from work (profile: $network_manager_work_profile)"
  $network_manager $network_manager_disconnect $network_manager_work_profile
}

connect_work() {
  printf '%s\n' "Connecting to work (profile: $network_manager_work_profile)"
  $network_manager $network_manager_connect $network_manager_work_profile
}

connect() {
  printf '%s\n' "Connecting to $1"
  $network_manager $network_manager_connect $1
}

# safely kill adapter between profiles to ensure smooth dis- and connection, also print ip link status
set_adapter_down() {
  ip link set $wireless_adapter down
}

print_adapter_status() {
  ip link | grep $wireless_adapter
}

# perl regex; find "Key=" and replace all chars after, on given line, with parameter $2, do this on file at $1
replace_password() {
  perl -pi -e "s/(?<=Key=).*$/$2/" $1
}

# call function with two args; concatenation of $network_manager_location and $1, followed by $2
change_profile_password() {
  replace_password $network_manager_location$1 $2
}

wait_for_network() {
    connection_start_time=$(date +%s.%N)
    until $(curl --output /dev/null --silent --head --fail --connect-timeout 1 $network_up_host); do
        sleep 0.25s
    done
    connection_stop_time=$(date +%s.%N) 
    printf '%s %.3fs\n' "Connection took:" "$(bc <<< "$connection_stop_time - $connection_start_time")"
}

update_routine() {
    printf '%s\n' "Waiting for network connection..."
    wait_for_network
    printf '%s\n' "Network connection established, updating cached passwords"
    update_passwords
}

if [[ $# -eq 0 ]] ; then
  printf '%s\n' "No arguments, connecting to home"
  disconnect_work
  set_adapter_down
  connect_home
  update_routine

elif [[ $# -eq 1 ]]; then

  # if aau, then find password, connect and update cached passwords when connection is given
  if [[ "$1" =~ work ]]; then
    printf '%s\n' "AAU-keyword found, checking for cached password"
    # grab daily password from helper
    daily_password=$(get_daily_password)

    # if no cached password, prompt for password
    if [[ $? -eq 1 ]]; then
        printf '%s' "No cached password found, input password manually: "
        read daily_password
    else
        # print daily password, if found
        printf '%s\n' "Daily AAU-1-DAY password is: $daily_password"
    fi

    # perform connection routine
    disconnect_home
    set_adapter_down
    change_profile_password $network_manager_work_profile $daily_password    
    connect_work
    update_routine

  # if alpha, num, alpha regex, then 1day password
  elif [[ "$1" =~ ^[a-z]+[0-9]+[a-z]+$ ]]; then
    printf '%s\n' "Connecting to AAU-1-DAY with password: $1"
    disconnect_home
    set_adapter_down
    change_profile_password $network_manager_work_profile $daily_password    
    connect_work
    update_routine 
  else
    printf '%s\n' "This doesn't seem to be an AAU-1-DAY password, please check"
  fi
fi
