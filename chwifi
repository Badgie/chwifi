#!/bin/bash
# netctl managing script for easier workday mornings and afternoons

# change to dir of script for sourcing
path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
cd "$path"

# source helper-script for calling getcurrentpassword and updatepasswords-function
source passwordhandler.sh

# source config for user-specific variables
source config

# quick functions for home/work actions on network manager
disconnect_home() {
    printf '%s\n' "Disconnecting from home (profile: $network_manager_home_profile)"
    $sudo $network_manager $network_manager_disconnect $network_manager_home_profile
}

connect_home() {
    printf '%s\n' "Connecting to home (profile: $network_manager_home_profile)"
    $sudo $network_manager $network_manager_connect $network_manager_home_profile
}

disconnect_work() {
    printf '%s\n' "Disconnecting from work (profile: $network_manager_work_profile)"
    $sudo $network_manager $network_manager_disconnect $network_manager_work_profile
}

connect_work() {
    printf '%s\n' "Connecting to work (profile: $network_manager_work_profile)"
    $sudo $network_manager $network_manager_connect $network_manager_work_profile
}

connect() {
    printf '%s\n' "Connecting to $1"
    $sudo $network_manager $network_manager_connect $1
}

disconnect() {
    printf '%s\n' "Disconnecting from profile $1"
    $sudo $network_manager $network_manager_disconnect $1
}
# safely kill adapter between profiles to ensure smooth dis- and connection, also print ip link status
set_adapter_down() {
    $sudo ip link set $wireless_adapter down
}

# disconnect and connect routine, takes disconnect profile as first parameter, and connect profile as second
connection_routine() {
    disconnect $1
    set_adapter_down
    change_mac
    connect $2
    update_routine
}

print_adapter_status() {
    ip link | grep $wireless_adapter
}

# perl regex; find "Key=" and replace all chars after, on given line, with parameter $2, do this on file at $1
replace_password() {
    $sudo perl -pi -e "s/(?<=Key=).*$/$2/" $1
}

# call function with two args; concatenation of $network_manager_location and profile as $1, followed by password as $2
change_profile_password() {
    replace_password $network_manager_location$1 $2
}

wait_for_network() {
    connection_start_time=$(date +%s.%N)
    until $(curl --output /dev/null --silent --head --fail --connect-timeout 1 $network_up_host); do
        sleep 0.25s
    done
    connection_stop_time=$(date +%s.%N) 
    printf '%s %.3fs\n' "Connection took:" "$(bc <<< "$connection_stop_time - $connection_start_time")"
}

update_routine() {
    printf '%s\n' "Waiting for network connection..."
    wait_for_network
    printf '%s\n' "Network connection established, updating cached passwords"
    update_passwords
}

# change MAC-address according to sourced options and print new MAC-address
change_mac() {
    printf "New MAC-address: "
    $sudo macchanger $macchanger_options $wireless_adapter | grep New | grep -o '\(\([0-9a-f]\{2\}\):\)\{5\}[0-9a-f]\{2\}'
}

display_help() {
    printf "chwifi is released under GPL-2.0 and comes with ABSOLUTELY NO WARRANTY, for details read LICENSE\n\n"
    printf "Usage: ./chwifi <profile>\n"
    printf "Configuration of this script is done through the 'config' file, for documentation read README.md\n"
    printf "Profiles:\n"
    printf "\thome\n"
    printf "\twork\n"
}

# if no-args, print help
if [[ $# -eq 0 ]] ; then
    display_help
elif [[ $# -eq 1 ]]; then

    # if home, then connect and update cached passwords when connection is given
    if [[ "$1" =~ home ]]; then
        printf '%s\n' "Home-keyword found, connecting to home"
        connection_routine $network_manager_work_profile $network_manager_home_profile
        
    # if work, then find password, connect and update cached passwords when connection is given
    elif [[ "$1" =~ work ]]; then
        printf '%s\n' "Work-keyword found, checking for cached password"
        # grab daily password from helper
        daily_password=$(get_daily_password)

        # if no cached password, prompt for password
        if [[ $? -eq 1 ]]; then
            printf '%s' "No cached password found, input password manually: "
            read daily_password
        else
            # print daily password, if found
            printf '%s\n' "Daily work password is: $daily_password"
        fi
        
        # change work profile password and do connection routine
        change_profile_password $network_manager_work_profile $daily_password    
        connection_routine $network_manager_home_profile $network_manager_work_profile 

    # if alpha, num, alpha regex, then work password
    elif [[ "$1" =~ $password_syntax ]]; then
        printf '%s\n' "Connecting to work with given password: $1"
            
        # change work profile password and do connection routine
        change_profile_password $network_manager_work_profile $daily_password    
        connection_routine $network_manager_home_profile $network_manager_work_profile 
    else
        printf '%s\n' "$1 doesn't seem to be an work password, please check"
    fi
fi
